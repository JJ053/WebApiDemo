name: .NET Core Build and Release
on:
  push:
    tags:
      - 'v*'
jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        dotnet-version: ['9.0.x']

    steps:
    - name: Checkout source
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ matrix.dotnet-version }}

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --self-contained false --configuration Release --no-restore

    - name: Test
      run: dotnet test ./MyWebApi.Tests/MyWebApi.Tests.csproj --configuration Release --no-build --verbosity normal

    - name: Publish
      run: dotnet publish ./MyWebApi/MyWebApi.csproj --self-contained false --configuration Release --no-build --output ./release

    - name: Zip
      run: |
        if [[ ${{ matrix.os }} == "ubuntu-latest" ]]; then
          rm -f release_${{ matrix.os }}.zip
          cd ./release
          zip -r ../release_${{ matrix.os }}.zip .
        else
          del /f release_${{ matrix.os }}.zip
          Compress-Archive -Path ./release/* -DestinationPath release_${{ matrix.os }}.zip -Force
        fi
      shell: bash

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

    - name: Upload Release Asset
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./release_${{ matrix.os }}.zip
        asset_name: ${{ github.ref_name }}_${{ runner.arch }}_${{ runner.os }}.zip
        asset_content_type: application/zip
